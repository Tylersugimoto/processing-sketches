int H; // Elapsed hours
int M; // Elapsed minute
int S; // Elapsed seconds

int TRS; // Total revolutionary seconds
int RCS; // Rev current seconds
int RCM; // Rev current minute
int RCH; // Rev current hour

float ratio=1.157;

void setup() {
  size(800, 800);
}

void draw() {

  // Get the time
  if (hour() > 12) { H = hour() - 12; } else { H = hour(); }
  M = minute();
  S = second();

  // Calculate elapsed whole Revolutionary seconds  
  TRS = floor(ratio * (S+(M*60)+(H*3600)));

  RCS=TRS%100;
  RCM=RCS%100*100-RCS/100;
  RCH=RCM%100*100*10-RCS-RCM/100000;

  // Normal clock
  pushMatrix();
  
    translate(width*3/4, height/2);
    rotate(radians(-90));
    ellipse(0, 0, 300, 300);
    
    float x=S*6;
    line(0, 0, 80*cos(radians(x)), 80*sin(radians(x)));
    float y=M*6;
    line(0, 0, 75*cos(radians(x)), 75*sin(radians(y)));
    float z=H*30;
    line(0, 0, 85*cos(radians(y)), 85*sin(radians(z)));

  popMatrix();


  // Revolutionary clock
  pushMatrix();
    translate(width/4, height/2);
    rotate(radians(-90));
    ellipse(0, 0, 300, 300);
    float RX=radians(RCS*3.6);
    line(0, 0, 80*cos(radians(RX)+1.5*PI), 80*sin(radians(RX)+1.5*PI));
    float RY=radians(RCM*3.6);
    line(0, 0, 75*cos(radians(RY)+1.5*PI), 75*sin(radians(RY)+1.5*PI));
    float RZ=radians(RCH*72);
    line(0, 0, 85*cos(radians(RZ)+1.5*PI), 85*sin(radians(RY)+1.5*PI));
  popMatrix();

  String RC="Revolutionary Clock";
  text(RC, 150, 600);
  String C="Regular Clock";
  text(C, 575, 600);

}
